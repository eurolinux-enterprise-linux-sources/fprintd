/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef _DBUS_GLIB_ASYNC_DATA_FREE
#define _DBUS_GLIB_ASYNC_DATA_FREE
static inline void
_dbus_glib_async_data_free (gpointer stuff)
{
	g_slice_free (DBusGAsyncData, stuff);
}
#endif

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_net_reactivated_Fprint_Manager
#define DBUS_GLIB_CLIENT_WRAPPERS_net_reactivated_Fprint_Manager

static inline gboolean
net_reactivated_Fprint_Manager_get_devices (DBusGProxy *proxy, GPtrArray** OUT_devices, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetDevices", error, G_TYPE_INVALID, dbus_g_type_get_collection ("GPtrArray", DBUS_TYPE_G_OBJECT_PATH), OUT_devices, G_TYPE_INVALID);
}

typedef void (*net_reactivated_Fprint_Manager_get_devices_reply) (DBusGProxy *proxy, GPtrArray *OUT_devices, GError *error, gpointer userdata);

static void
net_reactivated_Fprint_Manager_get_devices_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  GPtrArray* OUT_devices;
  dbus_g_proxy_end_call (proxy, call, &error, dbus_g_type_get_collection ("GPtrArray", DBUS_TYPE_G_OBJECT_PATH), &OUT_devices, G_TYPE_INVALID);
  (*(net_reactivated_Fprint_Manager_get_devices_reply)data->cb) (proxy, OUT_devices, error, data->userdata);
  return;
}

static inline DBusGProxyCall*
net_reactivated_Fprint_Manager_get_devices_async (DBusGProxy *proxy, net_reactivated_Fprint_Manager_get_devices_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetDevices", net_reactivated_Fprint_Manager_get_devices_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static inline gboolean
net_reactivated_Fprint_Manager_get_default_device (DBusGProxy *proxy, char** OUT_device, GError **error)

{
  return dbus_g_proxy_call (proxy, "GetDefaultDevice", error, G_TYPE_INVALID, DBUS_TYPE_G_OBJECT_PATH, OUT_device, G_TYPE_INVALID);
}

typedef void (*net_reactivated_Fprint_Manager_get_default_device_reply) (DBusGProxy *proxy, char *OUT_device, GError *error, gpointer userdata);

static void
net_reactivated_Fprint_Manager_get_default_device_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char* OUT_device;
  dbus_g_proxy_end_call (proxy, call, &error, DBUS_TYPE_G_OBJECT_PATH, &OUT_device, G_TYPE_INVALID);
  (*(net_reactivated_Fprint_Manager_get_default_device_reply)data->cb) (proxy, OUT_device, error, data->userdata);
  return;
}

static inline DBusGProxyCall*
net_reactivated_Fprint_Manager_get_default_device_async (DBusGProxy *proxy, net_reactivated_Fprint_Manager_get_default_device_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "GetDefaultDevice", net_reactivated_Fprint_Manager_get_default_device_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_net_reactivated_Fprint_Manager */

G_END_DECLS
