/* Generated by dbus-binding-tool; do not edit! */

#include <glib.h>
#include <dbus/dbus-glib.h>

G_BEGIN_DECLS

#ifndef _DBUS_GLIB_ASYNC_DATA_FREE
#define _DBUS_GLIB_ASYNC_DATA_FREE
static inline void
_dbus_glib_async_data_free (gpointer stuff)
{
	g_slice_free (DBusGAsyncData, stuff);
}
#endif

#ifndef DBUS_GLIB_CLIENT_WRAPPERS_net_reactivated_Fprint_Device
#define DBUS_GLIB_CLIENT_WRAPPERS_net_reactivated_Fprint_Device

static inline gboolean
net_reactivated_Fprint_Device_list_enrolled_fingers (DBusGProxy *proxy, const char * IN_username, char *** OUT_enrolled_fingers, GError **error)

{
  return dbus_g_proxy_call (proxy, "ListEnrolledFingers", error, G_TYPE_STRING, IN_username, G_TYPE_INVALID, G_TYPE_STRV, OUT_enrolled_fingers, G_TYPE_INVALID);
}

typedef void (*net_reactivated_Fprint_Device_list_enrolled_fingers_reply) (DBusGProxy *proxy, char * *OUT_enrolled_fingers, GError *error, gpointer userdata);

static void
net_reactivated_Fprint_Device_list_enrolled_fingers_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  char ** OUT_enrolled_fingers;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_STRV, &OUT_enrolled_fingers, G_TYPE_INVALID);
  (*(net_reactivated_Fprint_Device_list_enrolled_fingers_reply)data->cb) (proxy, OUT_enrolled_fingers, error, data->userdata);
  return;
}

static inline DBusGProxyCall*
net_reactivated_Fprint_Device_list_enrolled_fingers_async (DBusGProxy *proxy, const char * IN_username, net_reactivated_Fprint_Device_list_enrolled_fingers_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "ListEnrolledFingers", net_reactivated_Fprint_Device_list_enrolled_fingers_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_username, G_TYPE_INVALID);
}
static inline gboolean
net_reactivated_Fprint_Device_delete_enrolled_fingers (DBusGProxy *proxy, const char * IN_username, GError **error)

{
  return dbus_g_proxy_call (proxy, "DeleteEnrolledFingers", error, G_TYPE_STRING, IN_username, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*net_reactivated_Fprint_Device_delete_enrolled_fingers_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
net_reactivated_Fprint_Device_delete_enrolled_fingers_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(net_reactivated_Fprint_Device_delete_enrolled_fingers_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static inline DBusGProxyCall*
net_reactivated_Fprint_Device_delete_enrolled_fingers_async (DBusGProxy *proxy, const char * IN_username, net_reactivated_Fprint_Device_delete_enrolled_fingers_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "DeleteEnrolledFingers", net_reactivated_Fprint_Device_delete_enrolled_fingers_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_username, G_TYPE_INVALID);
}
static inline gboolean
net_reactivated_Fprint_Device_claim (DBusGProxy *proxy, const char * IN_username, GError **error)

{
  return dbus_g_proxy_call (proxy, "Claim", error, G_TYPE_STRING, IN_username, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*net_reactivated_Fprint_Device_claim_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
net_reactivated_Fprint_Device_claim_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(net_reactivated_Fprint_Device_claim_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static inline DBusGProxyCall*
net_reactivated_Fprint_Device_claim_async (DBusGProxy *proxy, const char * IN_username, net_reactivated_Fprint_Device_claim_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Claim", net_reactivated_Fprint_Device_claim_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_username, G_TYPE_INVALID);
}
static inline gboolean
net_reactivated_Fprint_Device_release (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "Release", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*net_reactivated_Fprint_Device_release_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
net_reactivated_Fprint_Device_release_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(net_reactivated_Fprint_Device_release_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static inline DBusGProxyCall*
net_reactivated_Fprint_Device_release_async (DBusGProxy *proxy, net_reactivated_Fprint_Device_release_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "Release", net_reactivated_Fprint_Device_release_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static inline gboolean
net_reactivated_Fprint_Device_verify_start (DBusGProxy *proxy, const char * IN_finger_name, GError **error)

{
  return dbus_g_proxy_call (proxy, "VerifyStart", error, G_TYPE_STRING, IN_finger_name, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*net_reactivated_Fprint_Device_verify_start_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
net_reactivated_Fprint_Device_verify_start_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(net_reactivated_Fprint_Device_verify_start_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static inline DBusGProxyCall*
net_reactivated_Fprint_Device_verify_start_async (DBusGProxy *proxy, const char * IN_finger_name, net_reactivated_Fprint_Device_verify_start_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "VerifyStart", net_reactivated_Fprint_Device_verify_start_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_finger_name, G_TYPE_INVALID);
}
static inline gboolean
net_reactivated_Fprint_Device_verify_stop (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "VerifyStop", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*net_reactivated_Fprint_Device_verify_stop_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
net_reactivated_Fprint_Device_verify_stop_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(net_reactivated_Fprint_Device_verify_stop_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static inline DBusGProxyCall*
net_reactivated_Fprint_Device_verify_stop_async (DBusGProxy *proxy, net_reactivated_Fprint_Device_verify_stop_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "VerifyStop", net_reactivated_Fprint_Device_verify_stop_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
static inline gboolean
net_reactivated_Fprint_Device_enroll_start (DBusGProxy *proxy, const char * IN_finger_name, GError **error)

{
  return dbus_g_proxy_call (proxy, "EnrollStart", error, G_TYPE_STRING, IN_finger_name, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*net_reactivated_Fprint_Device_enroll_start_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
net_reactivated_Fprint_Device_enroll_start_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(net_reactivated_Fprint_Device_enroll_start_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static inline DBusGProxyCall*
net_reactivated_Fprint_Device_enroll_start_async (DBusGProxy *proxy, const char * IN_finger_name, net_reactivated_Fprint_Device_enroll_start_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "EnrollStart", net_reactivated_Fprint_Device_enroll_start_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_STRING, IN_finger_name, G_TYPE_INVALID);
}
static inline gboolean
net_reactivated_Fprint_Device_enroll_stop (DBusGProxy *proxy, GError **error)

{
  return dbus_g_proxy_call (proxy, "EnrollStop", error, G_TYPE_INVALID, G_TYPE_INVALID);
}

typedef void (*net_reactivated_Fprint_Device_enroll_stop_reply) (DBusGProxy *proxy, GError *error, gpointer userdata);

static void
net_reactivated_Fprint_Device_enroll_stop_async_callback (DBusGProxy *proxy, DBusGProxyCall *call, void *user_data)
{
  DBusGAsyncData *data = (DBusGAsyncData*) user_data;
  GError *error = NULL;
  dbus_g_proxy_end_call (proxy, call, &error, G_TYPE_INVALID);
  (*(net_reactivated_Fprint_Device_enroll_stop_reply)data->cb) (proxy, error, data->userdata);
  return;
}

static inline DBusGProxyCall*
net_reactivated_Fprint_Device_enroll_stop_async (DBusGProxy *proxy, net_reactivated_Fprint_Device_enroll_stop_reply callback, gpointer userdata)

{
  DBusGAsyncData *stuff;
  stuff = g_slice_new (DBusGAsyncData);
  stuff->cb = G_CALLBACK (callback);
  stuff->userdata = userdata;
  return dbus_g_proxy_begin_call (proxy, "EnrollStop", net_reactivated_Fprint_Device_enroll_stop_async_callback, stuff, _dbus_glib_async_data_free, G_TYPE_INVALID);
}
#endif /* defined DBUS_GLIB_CLIENT_WRAPPERS_net_reactivated_Fprint_Device */

G_END_DECLS
